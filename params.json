{"name":"My-prototypes","tagline":"Add Array, Numbers, Object and String prototypes in your project.","body":"[![NPM](https://nodei.co/npm/my-prototypes.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/my-prototypes/)\r\n\r\n[![npm version](https://badge.fury.io/js/my-prototypes.svg)](http://badge.fury.io/js/my-prototypes) [![Codacy Badge](https://www.codacy.com/project/badge/ac6c42fb818542abaad4fb0fd05f39f1)](https://www.codacy.com/public/makso1979/my-prototypes) [![Code Climate](https://codeclimate.com/github/marcosomma/my-prototypes/badges/gpa.svg)](https://codeclimate.com/github/marcosomma/my-prototypes) [![Test Coverage](https://codeclimate.com/github/marcosomma/my-prototypes/badges/coverage.svg)](https://codeclimate.com/github/marcosomma/my-prototypes) [![Build Status](https://travis-ci.org/marcosomma/my-prototypes.svg?branch=master)](https://travis-ci.org/marcosomma/my-prototypes)\r\n# my-prototypes\r\nAdd Array, Numbers, Object and String prototypes in your project.\r\n\r\n**Install**\r\n```npm install my-prototypes```\r\n\r\n**Use**\r\n``` require('my-prototypes').init ```\r\n\r\n***\r\n\r\n## Array prototypes\r\n- even\r\n- evenIndex\r\n- odd\r\n- oddIndex\r\n\r\n**even**\r\n*Take all even numbers in an array*\r\n\r\n```[1,2,3,3,4,5,6,7,8,8,9,6,5,4].even()``` result ```[2,4,6,8,8,6,4]```\r\n\r\n**evenIndex**\r\n*Take all even index in an array*\r\n\r\n```[\"a\",\"A\",\"b\",\"B\",\"c\",\"C\",\"d\",\"D\",\"e\",\"E\",\"f\",\"F\"].evenIndex()``` result ```[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]```\r\n\r\n**odd**\r\n*Take all odd numbers in an array*\r\n\r\n```[1,2,3,3,4,5,6,7,8,8,9,6,5,4].odd()``` result ```[1,3,3,5,7,9,5]```\r\n\r\n**oddIndex**\r\n*Take all odd index in an array*\r\n\r\n```[\"a\",\"A\",\"b\",\"B\",\"c\",\"C\",\"d\",\"D\",\"e\",\"E\",\"f\",\"F\"].oddIndex()``` result ```[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]```\r\n\r\n***\r\n\r\n## Number prototypes\r\n- formatMoney\r\n- getSecond\r\n- getMilliSecond\r\n\r\n**formatMoney**(decimals)\r\n*Convert integer o float number in a money value*\r\n\r\n```1000000.12.formatMoney(2)``` result ```\"1,000,000.12\"```\r\n\r\n**getSecond**(hours,minutes,seconds)\r\n*Return seconds*\r\n\r\n```Number().getSecond(1,1,1)``` result ```3661```\r\n\r\n**getMilliSecond**(hours,minutes,seconds)\r\n*Return milliseconds*\r\n\r\n```Number().getMilliSecond(1,1,1)``` result ```3661000```\r\n\r\n***\r\n\r\n## Object prototypes\r\n- lengthJSON\r\n- splitJSON\r\n\r\n**lengthJSON**\r\n*Count element in a plane json*\r\n\r\n```Object.lengthJSON({\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\",\"key4\":\"value4\",\"key5\":\"value5\"})``` result ```5```\r\n\r\n**splitJSON**\r\n*Split element of a plane json in an array of single elements*\r\n\r\n```Object.splitJSON({\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"})``` result ```[{key1:'value1'},{key2:'value2'},{key3:'value3'}]```\r\n\r\n***\r\n\r\n## String prototypes\r\n- capitalize\r\n- capitalizeAll\r\n- getDateEU\r\n- getDateUS\r\n- getDbDate\r\n- getDbDateTime\r\n- htmlEscape (exclude \":\", \";\" and \"#\")\r\n- htmlUnescape (exclude \":\", \";\" and \"#\")\r\n- repeat\r\n- reverseWord\r\n- substringAfterTo\r\n- substringBeforeTo\r\n- validateContent (dateEU, dateUS, time, email, ip-address, alphanumeric and phone)\r\n\r\n**capitalize**\r\n*Capitalize first letter in a word*\r\n\r\n```'test'.capitalize()``` result ```\"Test\"```\r\n\r\n**capitalizeAll**\r\n*Capitalize all first letters of all word contained in a sentence separate by space*\r\n\r\n```'test test Test test'.capitalizeAll()``` result ```\"Test Test Test Test\"```\r\n\r\n**getDateEU**\r\n*Convert ```new Date``` in european format date*\r\n\r\n```String(new Date).getDateEU()``` result ```dd/mm/yyyy```\r\n\r\n**getDateUS**\r\n*Convert ```new Date``` in american format date*\r\n\r\n```String(new Date).getDateUS()``` result ```mm/dd/yyyy```\r\n\r\n**getDbDate**\r\n*Convert Database formar date ```2015-03-18T16:23:18.423Z``` in european format date*\r\n\r\n```'2015-03-18T16:23:18.423Z'.getDbDate()``` result ```dd/mm/yyyy```\r\n\r\n**getDbDateTime**\r\n*Convert Database formar date ```2015-03-18T16:23:18.423Z``` in european format date and time*\r\n\r\n```'2015-03-18T16:23:18.423Z'.getDbDateTime()``` result ```dd/mm/yyyy - hh:mm:ss```\r\n\r\n**htmlEscape**\r\n*Convert normal string in a html string*\r\n\r\n```'Marco&Co'.htmlEscape()``` result ```Marco&#38;Co```\r\n\r\n**htmlUnescape**\r\n*Convert html string in a normal string*\r\n\r\n```'Marco&#38;Co'.htmlUnescape()``` result ```Marco&Co```\r\n\r\n**repeat**\r\n*Repeat a word 'n' times*\r\n\r\n```'test0'.repeat(3)``` result ```\"test0test0test0\"```\r\n\r\n**reverseWord**\r\n*Reverse a word*\r\n\r\n```'test0'.reverseWord()``` result ```\"0tset\"```\r\n\r\n**substringBeforeTo**\r\n*Return substring before an symbol*\r\n\r\n```'test0.test1'.substringBeforeTo('.')``` result ```\"test0\"```\r\n\r\n**substringAfterTo**\r\n*Return substring after an symbol if the symbol is contained more times return an array*\r\n\r\n```'test0.test1'.substringAfterTo('.')``` result ```\"test1\"```\r\n```'test0.test1.test2.test3'.substringAfterTo('.')``` result ```[\"test1\",\"test2\",\"test3\"]```\r\n\r\n**validateContent**\r\n*Validate content in a string*\r\n\r\n```'mak.so1979@gmail.com'.validateContent('email')``` result ```true```\r\n```'mak.so1979gmailcom'.validateContent('email')``` result ```false```","google":"UA-60924417-1","note":"Don't delete this file! It's used internally to help with page regeneration."}